Union-Find (Disjoint Set) Data Structure

Overview

The Union-Find, or Disjoint Set, data structure is a powerful tool that keeps track of elements partitioned into multiple sets. It supports efficient operations to determine if two elements are in the same subset and to unify two subsets into one. Union-Find is widely used in algorithms for connected component detection, Kruskal’s Minimum Spanning Tree, and finding cycles in undirected graphs.

Features

	•	Union by Rank: Merges two sets by attaching the smaller tree under the root of the larger tree to keep the structure balanced.
	•	Path Compression: Flattens the structure to reduce the tree height, making future queries faster.
	•	Efficient Operations: Both find and union operations have an almost constant time complexity, O(\alpha(n)), where \alpha is the inverse Ackermann function, making them extremely efficient.

Time Complexity

	1.	find operation: This function determines the root of an element while performing path compression, which flattens the structure of the tree. In each call, nodes along the path are directly linked to the root, reducing future query times. Using path compression, the amortized time complexity for find is O(\alpha(n)), where \alpha is the inverse Ackermann function, which grows extremely slowly (almost constant time for practical values of n).
	2.	merge operation: This function merges two sets by root using union by rank, which attaches the smaller tree to the root of the larger tree. Union by rank helps keep the trees balanced, so they don’t grow too deep. When combined with path compression, the amortized time complexity of the merge operation is also O(\alpha(n)).
	3.	connected operation: This simply calls find on both elements and checks if they belong to the same root. The amortized time complexity for connected is therefore also O(\alpha(n)).

Overall, each operation—find, merge, and connected—has an amortized time complexity of O(\alpha(n)).

Space Complexity

	1.	parent array: This array stores the parent of each element, with one integer per element. The space complexity for this array is O(n).
	2.	ranks array: This array keeps track of the rank (or height) of each element’s root tree, which also requires O(n) space.
	3.	Additional variables: The _size integer variable requires O(1) space.

So, the overall space complexity of this Union-Find implementation is O(n).

Summary

	•	Time Complexity:
	•	find: O(\alpha(n)) (amortized)
	•	merge: O(\alpha(n)) (amortized)
	•	connected: O(\alpha(n)) (amortized)
	•	Space Complexity: O(n)


LOGIC OF RANKS:

In a Disjoint Set Union (DSU), also known as Union-Find, rank is a concept used to keep track of the “depth” or “height” of each tree in the forest of disjoint sets. This concept is essential in optimizing the union operation, which helps maintain a more balanced tree structure and improves the efficiency of subsequent operations.

Purpose of Ranks

The rank represents an estimate of the height of the tree rooted at a particular node. By using rank, we can ensure that when we perform a union of two sets, we attach the shorter tree under the root of the taller tree, keeping the overall tree as flat as possible. This practice, known as union by rank, helps minimize the height of the tree and improves the time complexity of find operations by preventing the trees from becoming too deep.

How Union by Rank Works

	1.	Initialize Ranks: At the beginning, each element is in its own set, so each element is its own root, and its rank is initialized to 0 (since it is the only node in its “tree”).
	2.	Union Operation with Rank:
	•	When performing a union of two sets, we find the roots of both sets.
	•	Compare the ranks of the two roots:
	•	If the ranks are different: Attach the tree with the smaller rank to the root with the larger rank. This ensures that the height of the resulting tree does not increase unnecessarily.
	•	If the ranks are the same: Attach one tree to the other and increase the rank of the resulting root by 1. This rank increase represents that the height of this combined tree has effectively increased.
	3.	Path Compression: In conjunction with union by rank, DSU often uses path compression during the find operation. Path compression flattens the tree structure by directly attaching each node along the search path to the root, reducing the height of the trees further. While path compression alone optimizes find, rank helps keep the trees balanced from the start.

Example

Let’s consider an example where we have elements {1, 2, 3, 4, 5}:
	•	Initially, each element is its own set:
	•	Roots: [1, 2, 3, 4, 5]
	•	Ranks: [0, 0, 0, 0, 0]
	•	Now, perform union(1, 2):
	•	Since both elements have the same rank, make 1 the root of 2 and increase the rank of 1 by 1.
	•	Roots: [1, 1, 3, 4, 5]
	•	Ranks: [1, 0, 0, 0, 0]
	•	Perform union(3, 4):
	•	Similarly, make 3 the root of 4 and increase the rank of 3 by 1.
	•	Roots: [1, 1, 3, 3, 5]
	•	Ranks: [1, 0, 1, 0, 0]
	•	Perform union(1, 3):
	•	The roots of 1 and 3 have the same rank. Attach one root to the other and increase the rank of the new root.
	•	Make 1 the root of 3, and increase the rank of 1 by 1.
	•	Roots: [1, 1, 1, 3, 5]
	•	Ranks: [2, 0, 1, 0, 0]

Benefits of Using Rank in DSU

Using ranks helps keep the tree structure balanced, ensuring the amortized time complexity of each operation remains low. Combined with path compression, union by rank allows DSU to perform find and union operations in nearly constant time, O(\alpha(n)), where \alpha is the inverse Ackermann function, which grows extremely slowly.

In summary, rank in DSU serves as a balancing technique to keep the trees shallow, which optimizes both find and union operations for faster performance.
